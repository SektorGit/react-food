{"version":3,"sources":["logo.svg","components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","sortByOptions","SearchBar","Object","keys","map","sortByOption","sortByOptionValue","key","className","this","renderSortByOptions","placeholder","React","Component","Business","business","props","src","alt","name","address","city","state","zipCode","category","rating","reviewCount","BusinessList","businesses","imageSrc","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,uMCGrCC,G,MAAgB,CAClB,aAAc,aACd,gBAAiB,SACjB,gBAAiB,iBA+BNC,E,8LA1BP,OAAOC,OAAOC,KAAKH,GAAeI,KAAI,SAAAC,GAClC,IAAIC,EAAoBN,EAAcK,GACtC,OAAO,wBAAIE,IAAKD,GAAoBD,Q,+BAKxC,OACI,yBAAKG,UAAU,aACX,yBAAKA,UAAU,0BACX,4BACGC,KAAKC,wBAGZ,yBAAKF,UAAU,oBACX,2BAAOG,YAAY,sBACnB,2BAAOA,YAAY,YAEvB,yBAAKH,UAAU,oBACX,6C,GArBII,IAAMC,WCqBbC,G,6LA1BH,IACDC,EAAYN,KAAKO,MAAjBD,SACL,OAEA,yBAAKP,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKS,IAAI,gFAAgFC,IAAI,MAE/F,4BAAKH,EAASI,MACd,yBAAKX,UAAU,wBACb,yBAAKA,UAAU,oBACb,2BAAIO,EAASK,SACb,2BAAIL,EAASM,MACb,2BAAIN,EAASO,MAAb,IAAqBP,EAASQ,UAEhC,yBAAKf,UAAU,oBACb,4BAAKO,EAASS,UACd,wBAAIhB,UAAU,UAAUO,EAASU,OAAjC,UACA,2BAAIV,EAASW,YAAb,mB,GAnBSd,IAAMC,YCedc,E,iLAZT,OACE,yBAAKnB,UAAU,gBAEXC,KAAKO,MAAMY,WAAWxB,KAAI,SAACW,GACzB,OAAO,kBAAC,EAAD,CAAUA,SAAUA,Y,GANdH,IAAMC,WCE3BE,EAAW,CACfc,SAAU,gFACVV,KAAM,sBACNC,QAAS,sBACTC,KAAM,aACNC,MAAO,KACPC,QAAS,QACTC,SAAU,UACVC,OAAQ,IACRC,YAAa,IAGTE,EAAa,CAACb,EAAUA,EAAUA,EAAUA,EAAUA,EAAUA,GAYvDe,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,+DACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcoB,WAAaA,MCbbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7ea4ccd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nconst sortByOptions = {\r\n    \"Best Match\": \"best_match\", //Values useing Yelp API \"Sort_by https://www.yelp.com/developers/documentation/v3/business_search\"\r\n    \"Highest Rated\": \"rating\", //Values useing Yelp API \"Sort_by https://www.yelp.com/developers/documentation/v3/business_search\"\r\n    \"Most Reviewed\": \"review_count\" //Values useing Yelp API \"Sort_by https://www.yelp.com/developers/documentation/v3/business_search\"\r\n};\r\n\r\nclass SearchBar extends React.Component {\r\n    renderSortByOptions() {\r\n        return Object.keys(sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue}>{sortByOption}</li> \r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                      {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input placeholder=\"Search Businesses\" />\r\n                    <input placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n      const {business} = this.props;\r\n        return (\r\n          \r\n        <div className=\"Business\">\r\n          <div className=\"image-container\">\r\n            <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt=''/>\r\n          </div>\r\n          <h2>{business.name}</h2>\r\n          <div className=\"Business-information\">\r\n            <div className=\"Business-address\">\r\n              <p>{business.address}</p>\r\n              <p>{business.city}</p>\r\n              <p>{business.state} {business.zipCode}</p>\r\n            </div>\r\n            <div className=\"Business-reviews\">\r\n              <h3>{business.category}</h3>\r\n              <h3 className=\"rating\">{business.rating} stars</h3>\r\n              <p>{business.reviewCount} reviews</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  export default Business;\r\n  ","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"../Business/Business\";\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n      return (\r\n        <div className=\"BusinessList\">\r\n          {\r\n            this.props.businesses.map((business) => {\r\n              return <Business business={business} />\r\n            })\r\n          }\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport BusinessList from '../BusinessList/BusinessList';\r\n\r\nconst business = {\r\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\r\n  name: 'MarginOtto Pizzeria',\r\n  address: '1010 Paddington Way',\r\n  city: 'Flavortown',\r\n  state: 'NY',\r\n  zipCode: '10101',\r\n  category: 'Italian',\r\n  rating: 4.5,\r\n  reviewCount: 90\r\n}\r\n\r\nconst businesses = [business, business, business, business, business, business];\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>React Restaurant Review Project</h1>\r\n      <SearchBar />\r\n      <BusinessList businesses= {businesses} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}